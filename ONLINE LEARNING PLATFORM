-----------------------------/*INSTALLATION MANGO DB*/-----------------------------

npm init -y
npm install express mongoose bcryptjs jsonwebtoken cors body-parser dotenv

--------------------------------/*SERVER.JS*/--------------------------------------

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
const dotenv = require('dotenv');
dotenv.config();

const app = express();
app.use(cors());
app.use(bodyParser.json());

// Database connection
mongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('MongoDB connected'))
    .catch(err => console.log(err));

app.get('/', (req, res) => {
    res.send('Welcome to the Online Learning Platform!');
});

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});


-------------------------------------------/*USER.JS*/----------------------------------------------------

const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const UserSchema = new mongoose.Schema({
    username: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    courses: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Course' }]
});

UserSchema.pre('save', async function(next) {
    if (this.isModified('password')) {
        this.password = await bcrypt.hash(this.password, 10);
    }
    next();
});

UserSchema.methods.comparePassword = function(password) {
    return bcrypt.compare(password, this.password);
};

module.exports = mongoose.model('User', UserSchema);


---------------------------------------------------/*COURSE.JS*/-----------------------------------------------

const mongoose = require('mongoose');

const CourseSchema = new mongoose.Schema({
    title: { type: String, required: true },
    description: { type: String, required: true },
    content: { type: String, required: true },
    instructor: { type: String, required: true }
});

module.exports = mongoose.model('Course', CourseSchema);


-----------------------------------------------/*authrouters.js*/-------------------------------------------

const express = require('express');
const User = require('./models/User');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const router = express.Router();

// Register new user
router.post('/register', async (req, res) => {
    const { username, email, password } = req.body;
    const user = new User({ username, email, password });

    try {
        await user.save();
        const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
        res.json({ token });
    } catch (err) {
        res.status(500).json({ error: 'Failed to register' });
    }
});

// Login user
router.post('/login', async (req, res) => {
    const { email, password } = req.body;
    const user = await User.findOne({ email });

    if (user && await bcrypt.compare(password, user.password)) {
        const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
        res.json({ token });
    } else {
        res.status(400).json({ error: 'Invalid credentials' });
    }
});

module.exports = router;


----------------------------------------------/*cousreRouters*/-----------------------------------------


const express = require('express');
const Course = require('./models/Course');
const User = require('./models/User');
const router = express.Router();

// Add a new course
router.post('/add', async (req, res) => {
    const { title, description, content, instructor } = req.body;
    const course = new Course({ title, description, content, instructor });

    try {
        await course.save();
        res.status(201).json(course);
    } catch (err) {
        res.status(500).json({ error: 'Failed to add course' });
    }
});

// Enroll in a course
router.post('/enroll/:courseId', async (req, res) => {
    const { userId } = req.body;
    const { courseId } = req.params;

    try {
        const user = await User.findById(userId);
        const course = await Course.findById(courseId);

        if (user && course) {
            user.courses.push(course);
            await user.save();
            res.json({ message: 'Enrolled successfully' });
        } else {
            res.status(404).json({ error: 'User or Course not found' });
        }
    } catch (err) {
        res.status(500).json({ error: 'Failed to enroll' });
    }
});

module.exports = router;


----------------------------------------/*Install React*/---------------------------------------

npx create-react-app online-learning-platform
cd online-learning-platform
npm install axios react-router-dom


--------------------------------------/*Reagister.js*/---------------------------------------

import React, { useState } from 'react';
import axios from 'axios';

const Register = () => {
    const [form, setForm] = useState({ username: '', email: '', password: '' });
    const [error, setError] = useState('');

    const handleChange = (e) => {
        setForm({ ...form, [e.target.name]: e.target.value });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const response = await axios.post('http://localhost:5000/register', form);
            localStorage.setItem('token', response.data.token);
            window.location.href = '/dashboard';
        } catch (err) {
            setError('Registration failed');
        }
    };

    return (
        <form onSubmit={handleSubmit}>
            <input type="text" name="username" placeholder="Username" onChange={handleChange} required />
            <input type="email" name="email" placeholder="Email" onChange={handleChange} required />
            <input type="password" name="password" placeholder="Password" onChange={handleChange} required />
            <button type="submit">Register</button>
            {error && <div>{error}</div>}
        </form>
    );
};

export default Register;


----------------------------------------/*Login.js*/--------------------------------------

import React, { useState } from 'react';
import axios from 'axios';

const Login = () => {
    const [form, setForm] = useState({ email: '', password: '' });
    const [error, setError] = useState('');

    const handleChange = (e) => {
        setForm({ ...form, [e.target.name]: e.target.value });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const response = await axios.post('http://localhost:5000/login', form);
            localStorage.setItem('token', response.data.token);
            window.location.href = '/dashboard';
        } catch (err) {
            setError('Login failed');
        }
    };

    return (
        <form onSubmit={handleSubmit}>
            <input type="email" name="email" placeholder="Email" onChange={handleChange} required />
            <input type="password" name="password" placeholder="Password" onChange={handleChange} required />
            <button type="submit">Login</button>
            {error && <div>{error}</div>}
        </form>
    );
};

export default Login;


----------------------------------------------------/*App.js*/------------------------------------

import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import Register from './components/Register';
import Login from './components/Login';

function App() {
    return (
        <Router>
            <Switch>
                <Route path="/register" component={Register} />
                <Route path="/login" component={Login} />
            </Switch>
        </Router>
    );
}

export default App;
